import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.context import FSMContext
from dishka.integrations.aiogram import FromDishka
from app.forms.realty_filter_form import SetupRealtyFilterForm
from app.keyboards.filter_keyboards import building_status_kb, room_count_kb, search_address_kb
from app.modules.realtor.utils import search_address
from app.db.cruds import UserCRUD, RealtyFilterCRUD
from app.db.enums import RealtyType
from uuid import uuid4
from app.config import env

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "/start")
async def start(
        message: Message,
        state: FSMContext,
        user_crud: FromDishka[UserCRUD]
):
    await state.clear()

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_crud.get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    logger.info(f"Created/got user: {user}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:", reply_markup=building_status_kb())
    await state.set_state(SetupRealtyFilterForm.choosing_building_status)


@router.callback_query(SetupRealtyFilterForm.choosing_building_status)
async def building_status_chosen(callback: CallbackQuery, state: FSMContext):
    building_type = callback.data.split("_")[1]
    await state.update_data(building_status=building_type)
    await callback.message.edit_text("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞–º –Ω—É–∂–Ω–æ?", reply_markup=room_count_kb())
    await state.set_state(SetupRealtyFilterForm.choosing_rooms)
    await callback.answer()


@router.callback_query(SetupRealtyFilterForm.choosing_rooms)
async def rooms_chosen(callback: CallbackQuery, state: FSMContext):
    room_count = callback.data.split("_")[1]
    await state.update_data(room_count=room_count)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=search_address_kb())
    await state.set_state(SetupRealtyFilterForm.entering_address)
    await callback.answer()


@router.inline_query(SetupRealtyFilterForm.entering_address)
async def address_inline_query(query: InlineQuery):
    results = []
    addresses = await search_address(query.query)
    if not addresses:
        await query.answer(results=[])
        return

    results = [
        InlineQueryResultArticle(
            id=str(uuid4()),
            title=f"üìç{address.text}",
            description=address.kind,
            input_message_content=InputTextMessageContent(message_text=f"{address.text}|{address.kind}")
        )
        for address in addresses if address.kind not in env.bot.address_blacklist
    ]
    await query.answer(results, cache_time=1)


@router.message(SetupRealtyFilterForm.entering_address)
async def address_chosen(
        message: Message,
        state: FSMContext,
        bot_username: str,
        filter_crud: FromDishka[RealtyFilterCRUD]
):
    if not message.via_bot or message.via_bot.username != bot_username:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=search_address_kb()
        )
        return

    # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –∏ —Ç–∏–ø
    address_data = message.text.split('|')
    address_text = address_data[0]
    address_kind = address_data[1] if len(address_data) > 1 else "unknown"

    await state.update_data(address=address_text, address_kind=address_kind)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    realty_type = RealtyType.FLAT if data['building_status'] == 'new' else RealtyType.HOUSE
    rooms = int(data['room_count'])

    filterr = await filter_crud.create_or_update_filter(
        user_id=message.from_user.id,
        realty_type=realty_type,
        rooms=rooms,
        address=address_text,
        address_kind=address_kind,
        apartment=False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        min_price=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–æ—Ä–º—É
        max_price=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–æ—Ä–º—É
        no_deposit=False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        kids=False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        pets=False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        renovation=[],  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        keywords=[]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )
    logger.info(f"Created/updated filter: {filterr}")

    await message.answer(
        f"‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
        f"- –¢–∏–ø –∂–∏–ª—å—è: {data['building_status']}\n"
        f"- –ö–æ–º–Ω–∞—Ç: {data['room_count']}\n"
        f"- –ê–¥—Ä–µ—Å: {address_text}\n"
        f"- –¢–∏–ø –∞–¥—Ä–µ—Å–∞: {address_kind}"
    )
    await state.clear()


@router.message(F.text == "/filter")
async def show_filter(
        message: Message,
        filter_crud: FromDishka[RealtyFilterCRUD]
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    realty_filter = await filter_crud.get_filter(message.from_user.id)

    if not realty_filter:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return

    filter_text = f"üîç –í–∞—à —Ñ–∏–ª—å—Ç—Ä:\n"
    filter_text += f"- –¢–∏–ø: {realty_filter.realty_type.value}\n"
    filter_text += f"- –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã: {'–î–∞' if realty_filter.apartment else '–ù–µ—Ç'}\n"
    filter_text += f"- –ö–æ–º–Ω–∞—Ç: {', '.join(map(str, realty_filter.rooms))}\n"
    filter_text += f"- –ê–¥—Ä–µ—Å: {realty_filter.address}\n"

    if realty_filter.min_price or realty_filter.max_price:
        price_range = f"{realty_filter.min_price or 0} - {realty_filter.max_price or '‚àû'}"
        filter_text += f"- –¶–µ–Ω–∞: {price_range}\n"

    if realty_filter.no_deposit:
        filter_text += "- –ë–µ–∑ –∑–∞–ª–æ–≥–∞: –î–∞\n"
    if realty_filter.kids:
        filter_text += "- –° –¥–µ—Ç—å–º–∏: –î–∞\n"
    if realty_filter.pets:
        filter_text += "- –° –∂–∏–≤–æ—Ç–Ω—ã–º–∏: –î–∞\n"

    if realty_filter.renovation:
        filter_text += f"- –†–µ–º–æ–Ω—Ç: {', '.join(realty_filter.renovation)}\n"

    if realty_filter.keywords:
        filter_text += f"- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(realty_filter.keywords)}\n"

    await message.answer(filter_text)


@router.message(F.text == "/delete_filter")
async def delete_filter(
        message: Message,
        filter_crud: FromDishka[RealtyFilterCRUD]
):
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    success = await filter_crud.delete_filter(message.from_user.id)

    if success:
        await message.answer("‚úÖ –§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")