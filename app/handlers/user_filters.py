import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.context import FSMContext
from dishka.integrations.aiogram import FromDishka
from app.forms.realty_filter_form import SetupRealtyFilterForm
from app.keyboards.filter_keyboards import (
    realty_type_kb, apartment_value_kb, room_count_kb, search_address_kb,
    price_range_kb, other_filters_kb, renovation_kb, confirm_filter_kb,
    back_kb
)
from app.modules.realtor.utils import search_address
from app.db.cruds import UserCRUD, RealtyFilterCRUD
from app.db.enums import RealtyType, Renovation
from uuid import uuid4
from app.config import env
from app.modules.realtor.cian.client import CianClient

router = Router()
logger = logging.getLogger(__name__)


# ========== –ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢ ==========
@router.message(F.text == "/start")
async def start_command(
        message: Message,
        state: FSMContext,
        user_crud: FromDishka[UserCRUD]
):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞"""
    await state.clear()

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_crud.get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    logger.info(f"User {user.user_id} started filter setup")

    msg = await message.answer(
        "üè† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è</b>\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:",
        reply_markup=realty_type_kb(),
        parse_mode='HTML'
    )
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(SetupRealtyFilterForm.choosing_realty_type)


# ========== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–ù–ê–ó–ê–î" ==========
@router.callback_query(F.data == "back")
async def handle_back(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    current_state = await state.get_state()
    data = await state.get_data()

    if current_state == SetupRealtyFilterForm.choosing_apartment_value.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∂–∏–ª—å—è
        await callback.message.edit_text(
            "üè† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:",
            reply_markup=realty_type_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.choosing_realty_type)

    elif current_state == SetupRealtyFilterForm.choosing_rooms.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä –∏–ª–∏ —Ç–∏–ø–∞ –∂–∏–ª—å—è
        if data.get('building_type') == 'flat':
            await callback.message.edit_text(
                "üè¢ <b>–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä:",
                reply_markup=apartment_value_kb(),
                parse_mode='HTML'
            )
            await state.set_state(SetupRealtyFilterForm.choosing_apartment_value)
        else:
            await callback.message.edit_text(
                "üè† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:",
                reply_markup=realty_type_kb(),
                parse_mode='HTML'
            )
            await state.set_state(SetupRealtyFilterForm.choosing_realty_type)

    elif current_state == SetupRealtyFilterForm.entering_address.state:
        if data.get('building_type') == 'flat':
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–Ω–∞—Ç
            data = await state.get_data()
            selected_rooms = set(data.get('selected_rooms', []))
            await callback.message.edit_text(
                "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
                reply_markup=room_count_kb(selected_rooms),
                parse_mode='HTML'
            )
            await state.set_state(SetupRealtyFilterForm.choosing_rooms)
        else:
            await callback.message.edit_text(
                "üè† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:",
                reply_markup=realty_type_kb(),
                parse_mode='HTML'
            )
            await state.set_state(SetupRealtyFilterForm.choosing_realty_type)

    elif current_state == SetupRealtyFilterForm.entering_price_range.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞
        await callback.message.edit_text(
            "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è:",
            reply_markup=search_address_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.entering_address)

    elif current_state == SetupRealtyFilterForm.entering_custom_min_price.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–µ–Ω—ã
        await callback.message.edit_text(
            "üí∞ <b>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã:",
            reply_markup=price_range_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.entering_price_range)

    elif current_state == SetupRealtyFilterForm.entering_custom_max_price.state:
        await callback.message.edit_text(
            "üí∞ <b>–°–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ/–º–µ—Å.):",
            reply_markup=back_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.entering_custom_min_price)

    elif current_state == SetupRealtyFilterForm.choosing_other.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–µ–Ω—ã
        await callback.message.edit_text(
            "üí∞ <b>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã:",
            reply_markup=price_range_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.entering_price_range)

    elif current_state == SetupRealtyFilterForm.choosing_renovation.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
        data = await state.get_data()
        selected_other = set(data.get('selected_other_filters', []))
        await callback.message.edit_text(
            "‚ú® <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å —É—Å–ª–æ–≤–∏—è:",
            reply_markup=other_filters_kb(selected_other),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.choosing_other)

    elif current_state == SetupRealtyFilterForm.confirming_filter.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–º–æ–Ω—Ç–∞
        data = await state.get_data()
        selected_renovation = set(data.get('selected_renovations', []))
        await callback.message.edit_text(
            "üî® <b>–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ä–µ–º–æ–Ω—Ç–∞:",
            reply_markup=renovation_kb(selected_renovation),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.choosing_renovation)

    await callback.answer()


# ========== –®–ê–ì 1: –¢–ò–ü –ñ–ò–õ–¨–Ø ==========
@router.callback_query(SetupRealtyFilterForm.choosing_realty_type)
async def handle_realty_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∏–ª—å—è"""
    realty_type = callback.data.split("_")[1]  # flat –∏–ª–∏ house
    await state.update_data(building_type=realty_type)

    if realty_type == "flat":
        # –î–ª—è –∫–≤–∞—Ä—Ç–∏—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä
        await callback.message.edit_text(
            "üè¢ <b>–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä:",
            reply_markup=apartment_value_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.choosing_apartment_value)
    else:
        # –î–ª—è –¥–æ–º–æ–≤ —Å—Ä–∞–∑—É –∫ –∞–¥—Ä–µ—Å—É
        await callback.message.edit_text(
            "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è:",
            reply_markup=search_address_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.entering_address)

    await callback.answer()


# ========== –®–ê–ì 2: –¢–ò–ü –ö–í–ê–†–¢–ò–† ==========
@router.callback_query(SetupRealtyFilterForm.choosing_apartment_value)
async def handle_apartment_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–≤–∞—Ä—Ç–∏—Ä"""
    apartment_type = callback.data.split("_")[1]  # yes –∏–ª–∏ no
    apartment = apartment_type == "yes"
    await state.update_data(apartment=apartment)

    await callback.message.edit_text(
        "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=room_count_kb(),
        parse_mode='HTML'
    )
    await state.set_state(SetupRealtyFilterForm.choosing_rooms)
    await callback.answer()


# ========== –®–ê–ì 3: –ö–û–õ–ò–ß–ï–°–¢–í–û –ö–û–ú–ù–ê–¢ ==========
@router.callback_query(SetupRealtyFilterForm.choosing_rooms)
async def handle_rooms(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç"""
    data = await state.get_data()
    selected_rooms = set(data.get('selected_rooms', []))

    if callback.data.startswith("room_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
        room_num = int(callback.data.split("_")[1])
        if room_num in selected_rooms:
            selected_rooms.remove(room_num)
        else:
            selected_rooms.add(room_num)

        await state.update_data(selected_rooms=list(selected_rooms))
        await callback.message.edit_reply_markup(reply_markup=room_count_kb(selected_rooms))
        await callback.answer()

    elif callback.data == "rooms_confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        if not selected_rooms:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ–º–Ω–∞—Ç", show_alert=True)
            return

        await state.update_data(rooms=list(selected_rooms))
        await callback.message.edit_text(
            "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è:",
            reply_markup=search_address_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.entering_address)
        await callback.answer()


# ========== –®–ê–ì 4: –ê–î–†–ï–° ==========
@router.inline_query(SetupRealtyFilterForm.entering_address)
async def address_inline_search(query: InlineQuery):
    """–ò–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤"""
    results = []
    if query.query.strip():
        try:
            addresses = await search_address(query.query)
            results = [
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title=f"üìç {address.text}",
                    description=address.kind,
                    input_message_content=InputTextMessageContent(
                        message_text=f"{address.kind}: {address.text}"
                    )
                )
                for address in addresses[:15]
                if address.kind not in env.bot.address_blacklist
            ]
        except Exception as e:
            logger.error(f"Error in address search: {e}")

    await query.answer(results, cache_time=1)


@router.message(SetupRealtyFilterForm.entering_address)
async def handle_address(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    bot_username = (await bot.get_me()).username
    if not message.via_bot or message.via_bot.username != bot_username:
        await message.answer(
            "<i>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ.</i>",
            reply_markup=search_address_kb()
        )
        return
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    address_data = message.text.split(': ', 1)
    address_text = address_data[1].strip()
    address_kind = address_data[0].strip()

    await state.update_data(address=address_text, address_kind=address_kind)
    await message.delete()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=(await state.get_data())["msg_id"],
        text="üí∞ <b>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã (‚ÇΩ/–º–µ—Å.):",
        reply_markup=price_range_kb(),
        parse_mode='HTML'
    )
    await state.set_state(SetupRealtyFilterForm.entering_price_range)


# ========== –®–ê–ì 5: –¶–ï–ù–ê ==========
@router.callback_query(SetupRealtyFilterForm.entering_price_range)
async def handle_price_range(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    if callback.data == "price_any":
        await state.update_data(min_price=1, max_price=9999999)
    elif callback.data == "price_custom":
        await callback.message.edit_text(
            "üí∞ <b>–°–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ/–º–µ—Å.):",
            reply_markup=back_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.entering_custom_min_price)
        await callback.answer()
        return
    else:
        # –ü–∞—Ä—Å–∏–º –≥–æ—Ç–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        parts = callback.data.split("_")
        min_price = int(parts[1]) if parts[1] != "0" else 0
        max_price = int(parts[2]) if parts[2] != "0" else 9999999 # TODO kostl
        await state.update_data(min_price=min_price, max_price=max_price)

    await callback.message.edit_text(
        "‚ú® <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å —É—Å–ª–æ–≤–∏—è:",
        reply_markup=other_filters_kb(),
        parse_mode='HTML'
    )
    await state.set_state(SetupRealtyFilterForm.choosing_other)
    await callback.answer()

@router.message(SetupRealtyFilterForm.entering_custom_min_price)
async def handle_custom_min_price(message: Message, state: FSMContext, bot: Bot):
    min_price = message.text.strip()
    await message.delete()
    if not min_price.isdigit():
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=(await state.get_data())["msg_id"],
            text="<i>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–∞–∫ —á–∏—Å–ª–æ (43000, 8022 –∏ —Ç.–¥.):</i>",
            reply_markup=back_kb(),
            parse_mode='HTML'
        )
        return
    await state.update_data(min_price=int(min_price))
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=(await state.get_data())["msg_id"],
        text="üí∞ <b>–°–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ/–º–µ—Å.):",
        reply_markup=back_kb(),
        parse_mode='HTML'
    )
    await state.set_state(SetupRealtyFilterForm.entering_custom_max_price)

@router.message(SetupRealtyFilterForm.entering_custom_max_price)
async def handle_custom_max_price(message: Message, state: FSMContext, bot: Bot):
    max_price = message.text.strip()
    await message.delete()
    if not max_price.isdigit():
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=(await state.get_data())["msg_id"],
            text="<i>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–∞–∫ —á–∏—Å–ª–æ (43000, 8022 –∏ —Ç.–¥.):</i>",
            reply_markup=back_kb(),
            parse_mode='HTML'
        )
        return
    await state.update_data(max_price=int(max_price))
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=(await state.get_data())["msg_id"],
        text="‚ú® <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å —É—Å–ª–æ–≤–∏—è:",
        reply_markup=other_filters_kb(),
        parse_mode='HTML'
    )
    await state.set_state(SetupRealtyFilterForm.choosing_other)

# ========== –®–ê–ì 6: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø ==========
@router.callback_query(SetupRealtyFilterForm.choosing_other)
async def handle_other_filters(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–¥–µ—Ç–∏, –∂–∏–≤–æ—Ç–Ω—ã–µ, –∑–∞–ª–æ–≥)"""
    state_data = await state.get_data()
    selected_other = set(state_data.get('selected_other_filters', []))

    if callback.data.startswith("other_") and callback.data != "other_confirm":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏—è
        filter_type = callback.data.split("_", 1)[1]
        if filter_type in selected_other:
            selected_other.remove(filter_type)
        else:
            selected_other.add(filter_type)

        await state.update_data(selected_other_filters=list(selected_other))
        await callback.message.edit_reply_markup(reply_markup=other_filters_kb(selected_other))
        await callback.answer()

    elif callback.data == "other_confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–º–æ–Ω—Ç—É
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞
        kids = "kids" in selected_other
        pets = "pets" in selected_other
        no_deposit = "no_deposit" in selected_other

        await state.update_data(kids=kids, pets=pets, no_deposit=no_deposit)

        await callback.message.edit_text(
            "üî® <b>–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ä–µ–º–æ–Ω—Ç–∞:",
            reply_markup=renovation_kb(),
            parse_mode='HTML'
        )
        await state.set_state(SetupRealtyFilterForm.choosing_renovation)
        await callback.answer()


# ========== –®–ê–ì 7: –†–ï–ú–û–ù–¢ ==========
@router.callback_query(SetupRealtyFilterForm.choosing_renovation)
async def handle_renovation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —Ä–µ–º–æ–Ω—Ç–∞"""
    state_data = await state.get_data()
    selected_renovations = set(state_data.get('selected_renovations', []))

    if callback.data.startswith("renovation_") and callback.data != "renovation_confirm":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–º–æ–Ω—Ç–∞
        renovation_type = callback.data.split("_")[1]

        if renovation_type == "any":
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–ù–µ–≤–∞–∂–Ω–æ", –æ—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            selected_renovations = {"any"}
        else:
            # –£–±–∏—Ä–∞–µ–º "–ù–µ–≤–∞–∂–Ω–æ" –µ—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø
            selected_renovations.discard("any")

            if renovation_type in selected_renovations:
                selected_renovations.remove(renovation_type)
            else:
                selected_renovations.add(renovation_type)

        await state.update_data(selected_renovations=list(selected_renovations))
        await callback.message.edit_reply_markup(reply_markup=renovation_kb(selected_renovations))
        await callback.answer()

    elif callback.data == "renovation_confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–º–æ–Ω—Ç–∞
        if not selected_renovations:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ enum –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∫—Ä–æ–º–µ "any")
        renovation_enums = []
        if "any" not in selected_renovations:
            renovation_mapping = {
                "cosmetic": Renovation.COSMETIC,
                "euro": Renovation.EURO,
                "designed": Renovation.DESIGNED
            }
            renovation_enums = [renovation_mapping[r] for r in selected_renovations if r in renovation_mapping]

        await state.update_data(renovation=renovation_enums)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_filter_confirmation(callback.message, state)
        await callback.answer()


# ========== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê ==========
async def show_filter_confirmation(message_obj, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
    text = "üìã <b>–°–≤–æ–¥–∫–∞ –≤–∞—à–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"

    # –¢–∏–ø –∂–∏–ª—å—è
    building_type = "üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞" if data['building_type'] == 'flat' else "üè† –î–æ–º"
    text += f"üè† <b>–¢–∏–ø –∂–∏–ª—å—è:</b> {building_type}\n"

    # –¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä)
    if data['building_type'] == 'flat':
        apt_text = "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã" if data.get('apartment') else "–û–±—ã—á–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã"
        text += f"üè¢ <b>–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä:</b> {apt_text}\n"

    # –ö–æ–º–Ω–∞—Ç—ã
    rooms = data.get('rooms', [])
    room_names = []
    for room in sorted(rooms):
        if room == 9:
            room_names.append("–°—Ç—É–¥–∏—è")
        else:
            room_names.append(f"{room} –∫–æ–º–Ω.")
    text += f"üî¢ <b>–ö–æ–º–Ω–∞—Ç—ã:</b> {', '.join(room_names)}\n"

    # –ê–¥—Ä–µ—Å
    text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

    # –¶–µ–Ω–∞
    min_price = data.get('min_price')
    max_price = data.get('max_price')
    if min_price or max_price:
        price_parts = []
        if min_price:
            price_parts.append(f"–æ—Ç {min_price:,}".replace(',', ' '))
        if max_price:
            price_parts.append(f"–¥–æ {max_price:,}".replace(',', ' '))
        text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {' '.join(price_parts)} ‚ÇΩ\n"
    else:
        text += f"üí∞ <b>–¶–µ–Ω–∞:</b> –õ—é–±–∞—è\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    conditions = []
    if data.get('kids'):
        conditions.append("–° –¥–µ—Ç—å–º–∏")
    if data.get('pets'):
        conditions.append("–° –∂–∏–≤–æ—Ç–Ω—ã–º–∏")
    if data.get('no_deposit'):
        conditions.append("–ë–µ–∑ –∑–∞–ª–æ–≥–∞")

    if conditions:
        text += f"‚ú® <b>–£—Å–ª–æ–≤–∏—è:</b> {', '.join(conditions)}\n"
    else:
        text += f"‚ú® <b>–£—Å–ª–æ–≤–∏—è:</b> –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"

    # –†–µ–º–æ–Ω—Ç
    renovation = data.get('renovation', [])
    selected_reno = data.get('selected_renovations', [])

    if "any" in selected_reno:
        text += f"üî® <b>–†–µ–º–æ–Ω—Ç:</b> –õ—é–±–æ–π\n"
    elif renovation:
        renovation_names = {
            Renovation.COSMETIC: "–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π",
            Renovation.EURO: "–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç",
            Renovation.DESIGNED: "–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π"
        }
        reno_text = ", ".join([renovation_names.get(r, str(r)) for r in renovation])
        text += f"üî® <b>–†–µ–º–æ–Ω—Ç:</b> {reno_text}\n"
    else:
        text += f"üî® <b>–†–µ–º–æ–Ω—Ç:</b> –õ—é–±–æ–π\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(message_obj, 'edit_text'):
        await message_obj.edit_text(text, reply_markup=confirm_filter_kb(), parse_mode='HTML')
    else:
        await message_obj.answer(text, reply_markup=confirm_filter_kb(), parse_mode='HTML')

    await state.set_state(SetupRealtyFilterForm.confirming_filter)


@router.callback_query(SetupRealtyFilterForm.confirming_filter)
async def handle_filter_confirmation(callback: CallbackQuery, state: FSMContext,
                                     filter_crud: FromDishka[RealtyFilterCRUD]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    if callback.data == "filter_save":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        data = await state.get_data()

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            realty_type = RealtyType.FLAT if data['building_type'] == 'flat' else RealtyType.HOUSE

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            filter_obj = await filter_crud.create_or_update_filter(
                user_id=callback.from_user.id,
                realty_type=realty_type,
                apartment=data.get('apartment', False),
                rooms=data.get('rooms', []),
                address=data.get('address', ''),
                address_kind=data.get('address_kind', ''),
                min_price=data.get('min_price'),
                max_price=data.get('max_price'),
                no_deposit=data.get('no_deposit', False),
                kids=data.get('kids', False),
                pets=data.get('pets', False),
                renovation=data.get('renovation', []),
                keywords=data.get('keywords', [])
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
            await callback.message.edit_text(
                "üîç <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...</b>",
                parse_mode='HTML'
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¶–ò–ê–ù –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            await _show_initial_search_results(callback, filter_obj, state)

        except Exception as e:
            logger.error(f"Error saving filter for user {callback.from_user.id}: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

    await callback.answer()


async def _show_initial_search_results(callback: CallbackQuery, filter_obj, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    from app.db.session import sessionmaker
    from app.db.cruds import RealtyFilterCRUD, OfferCRUD, NotificationCRUD
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¶–ò–ê–ù
        cian_client = CianClient()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        offers = await cian_client.get_offers(filter_obj)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∏ —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏—Ö
        if offers:
            async with sessionmaker() as session:
                offer_crud = OfferCRUD(session)
                filter_crud = RealtyFilterCRUD(session)
                notification_crud = NotificationCRUD(session)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ
                offers_to_save = []
                for offer in offers:
                    if not await offer_crud.offer_exists(offer.offer_id):
                        offers_to_save.append(offer)
                
                if offers_to_save:
                    await offer_crud.bulk_create_offers(offers_to_save)
                    logger.info(f"Saved {len(offers_to_save)} existing offers for user {callback.from_user.id}")
                
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö (—á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)
                notifications_data = []
                for offer in offers:
                    if not await notification_crud.notification_exists(callback.from_user.id, offer.offer_id):
                        notifications_data.append({
                            'user_id': callback.from_user.id,
                            'offer_id': offer.offer_id
                        })
                
                if notifications_data:
                    await notification_crud.bulk_create_notifications(notifications_data)
                    logger.info(f"Created {len(notifications_data)} initial notifications for user {callback.from_user.id} (marked as existing)")
                
                # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                await filter_crud.mark_initial_check_completed(callback.from_user.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if offers:
            message_text = (
                f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b> {len(offers)}\n"
                #f"üîó <a href=''>–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –¶–ò–ê–ù</a>\n\n"
                f"üì¨ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ <b>–Ω–æ–≤—ã—Ö</b> –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö, "
                f"–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞."
            )
        else:
            message_text = (
                "‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                "üîç <b>–û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>\n"
                "‚ö†Ô∏è <b>–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∑–∞–¥–∞–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.</b>\n\n"
                "üì¨ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."
            )
        
        await callback.message.edit_text(
            message_text,
            parse_mode='HTML'
        )
        
        await state.clear()
        await callback.answer("‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
    except Exception as e:
        logger.error(f"Error checking initial offers for user {callback.from_user.id}: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è
        await callback.message.edit_text(
            "‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            "üì¨ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö, "
            "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
            parse_mode='HTML'
        )
        await state.clear()
        await callback.answer("‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")