from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from dishka.integrations.aiogram import FromDishka
from app.db.cruds import UserCRUD, RealtyFilterCRUD, OfferCRUD, NotificationCRUD
from app.config import env

router = Router()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π user_id)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤


def is_admin(message: Message) -> bool:
    return message.from_user.id in ADMIN_IDS


@router.message(Command("stats"))
async def get_stats(
        message: Message,
        user_crud: FromDishka[UserCRUD],
        filter_crud: FromDishka[RealtyFilterCRUD],
        offer_crud: FromDishka[OfferCRUD],
        notification_crud: FromDishka[NotificationCRUD]
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(message):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users = await user_crud.get_active_users()
        filters = await filter_crud.get_all_filters()
        new_offers = await offer_crud.get_new_offers(limit=1000)
        pending_notifications = await notification_crud.get_pending_notifications(limit=1000)

        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        stats_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        stats_text += f"üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(filters)}\n"
        stats_text += f"üè† –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(new_offers)}\n"
        stats_text += f"üì¨ –û–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(pending_notifications)}\n"

        await message.answer(stats_text, parse_mode='HTML')

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@router.message(Command("cleanup"))
async def cleanup_old_data(
        message: Message,
        offer_crud: FromDishka[OfferCRUD]
):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(message):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    try:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        count = await offer_crud.deactivate_old_offers(days=30)

        await message.answer(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")


@router.message(Command("broadcast"))
async def broadcast_message(message: Message, user_crud: FromDishka[UserCRUD]):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(message):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if not message.reply_to_message or not message.reply_to_message.text:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å")
        return

    try:
        broadcast_text = message.reply_to_message.text
        users = await user_crud.get_active_users()

        success_count = 0
        error_count = 0

        status_message = await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for user in users:
            try:
                await message.bot.send_message(
                    chat_id=user.user_id,
                    text=broadcast_text
                )
                success_count += 1
            except Exception:
                error_count += 1

        await status_message.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {error_count}"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")


@router.message(Command("test_monitoring"))
async def test_monitoring(
        message: Message,
        filter_crud: FromDishka[RealtyFilterCRUD]
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∞
        realty_filter = await filter_crud.get_filter(message.from_user.id)

        if not realty_filter:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        from app.modules.realtor.cian import CianClient

        cian_client = CianClient()
        offers = await cian_client.get_offers(realty_filter)

        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É\n"
            f"–¢–∏–ø: {realty_filter.realty_type.value}\n"
            f"–ö–æ–º–Ω–∞—Ç: {realty_filter.rooms}\n"
            f"–ê–¥—Ä–µ—Å: {realty_filter.address}"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")